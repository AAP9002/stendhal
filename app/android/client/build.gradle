plugins {
	id 'com.android.application'
}

android {
	namespace "org.stendhalgame.client"
	compileSdk 32

	defaultConfig {
		applicationId namespace
		minSdk 21
		targetSdk 32
		versionCode 1
		versionName "1045005"
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		targetSdkVersion 32
		minSdkVersion 21
	}

	// build output
	project.setProperty("archivesBaseName", "${namespace}-${defaultConfig.versionName}")
	project.setProperty("buildDir", "${projectDir}/../../../build/build_android_client")

	/* A keystore.properties file can be placed in the root Android project directory and must
	 * include the following values:
	 *   storeFile=<path-to-keystore-file>
	 *   storePassword=<store-password>
	 *   keyPassword=<key-password>
	 *   keyAlias=<key-alias>
	 * The `storeFile` path value must use double backslashes (\\) on Windows.
	 */
	def keystorePropertiesFile = rootProject.file("keystore.properties")
	def keystoreProperties = new Properties()
	if (keystorePropertiesFile.exists()) {
		keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
	}

	signingConfigs {
		release {
			if (keystorePropertiesFile.exists()) {
				storeFile file(keystoreProperties["storeFile"])
				storePassword keystoreProperties["storePassword"]
				keyPassword keystoreProperties["keyPassword"]
				keyAlias keystoreProperties["keyAlias"]
			} else {
				// default to debug key
				storeFile signingConfigs.debug.storeFile
				storePassword signingConfigs.debug.storePassword
				keyPassword signingConfigs.debug.keyPassword
				keyAlias signingConfigs.debug.keyAlias
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
		}

		debug {
			applicationIdSuffix ".debug"
			versionNameSuffix "-debug"
			signingConfig signingConfigs.release
		}
	}

	buildTypes.all { type ->
		if (!type.name.equals("debug")) {
			sourceSets[type.name].java { srcDirs "src/shared/java/" }
		}
	}

	applicationVariants.all { variant ->
		variant.outputs.all {
			def buildRoot = "../../../../"
			if (variant.name.equals("release")) {
				// exclude "-release" suffix
				outputFileName = new File("${buildRoot}", "${archivesBaseName}.apk")
			} else {
				outputFileName = new File("${buildRoot}", "${outputFileName}")
			}
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	compileSdkVersion 32
	buildToolsVersion '32.0.0'

	lintOptions {
		abortOnError false
	}

	// print some build info for debugging
	println("Package:         " + namespace)
	println("Application ID:  " + defaultConfig.applicationId)
	println("Version:         " + defaultConfig.versionName)
	println("Output basename: " + archivesBaseName)
	println("Signing key:     " + signingConfigs.release.storeFile)
	println("Build directory: " + project.buildDir)
}

dependencies {
	implementation 'androidx.appcompat:appcompat:1.4.1'
	implementation 'com.google.android.material:material:1.4.0'
	//testImplementation 'junit:junit:4.+'
	//androidTestImplementation 'androidx.test.ext:junit:1.1.2'
	//androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
